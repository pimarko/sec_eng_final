Window View{
    Filter entity
    
    Label Name_L{
        String text := ['View Name:']
    }
    TextField Name_TF{
        String text:= [$View.entity$.name]
    }

    Label Filters_L{
        String text := ['Filters:']
    }

    Table Filters_T{
        Set(Filter) rows := [$View.entity$.filters]
        Filter selected  := [null]
        columns {
            ['Attribute'] : Label attr {
                event onView (text){
		    try{
			text := [$Table_T.row$.attribute.name()]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Operator'] : Label op {
                event onView (text){
                    try{
                        text := [$Table_T.row$.rule.name()]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Parameter'] : Label param {
                event onView (text){
                     try{
                         text := [$Table_T.row$.filterParameter]
                     } catch (SecurityException){
                         text := ['RESTRICTED']
                     }
                }
            }
        }
    }
    Button Delete_B{
        String text := ['Delete filter']
        event onClick{
            if [ (not $Filters_T.selected$.oclIsUndefined())]{
                try{
                    [$filterWindow.entity$.filters]-=[$Filters_T.selected$]
                    delete [$Filters_T.selected$]
                    Filters_T.rows := [null]
                    reevaluate Filters_T.rows
                    notification(['Success'],['Filter deleted'],[500])
                } catch (SecurityException){
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'],['Nothing selected'],[500])
            }
        }   
    }
    Label Add_L{
        String text := ['Add filter:']
    }
    ComboBox Attribute_CB {
        Set(Attribute) rows := [Attribute.allInstances()->select(r|r.toString().size()<>0)]
        Attribute selected  := [null]
        Label attrs { 
            event onView (text) {
                try{
                    text := [$Attribute_CB.row$.name()] 
                } catch (SecurityException){
                    text := ['RESTRICTED']
                }
            }
        }
    }
    ComboBox Op_CB {
        Set(Rule) rows := [Rule.allInstances()->select(r|r.toString().size()<>0)]
        Rule rule  := [null]
        Label ops { 
            event onView (text) {
                 try{
                    text := [$Op_CB.row$.name()] 
                } catch (SecurityException){
                    text := ['RESTRICTED']
                }
            }
        }
    }
    TextField Param_TF {
        String text := [null]
    }   
    Button Add_B {
        String text := ['Add Filter']
        event onClick{
            if [(not $Param_TF.text$.oclIsUndefined()) and (not ($Param_TF.text$.size() = 0)) and (not $Op_CB.selected$.oclIsUndefined()) and (not $Attribute_CB.selected$.oclIsUndefined())] {
                try{
                    newFilter := new Filter
                    [$newFilter$.filterParameter]:=[$Param_TF.text$]
                    [$newFilter$.attribute]:=[$Attribute_CB.selected$]
                    [$newFilter$.rule]:=[$Op_CB.selected$]
                    [$newFilter$.filterView]:=[$View.entity$]
                    notification(['Success'],['View created'],[500])
                    Param_TF.text:=[null]
                    Op_CB.selected := [null]
                    Attribute_CB.selected := [null]
                    Filters_T.rows := [null]
                    reevaluate Filter_T.rows
                } catch(SecurityException){
                    notification(['Error'],['Not allowed'],[500])        
                }
            } else {
                notification(['Error'],['Form contains errors.'],[500])
            }
            notification(['Error'],['Not implemented'],[500])        
        }   
    }
    Button Back_B{
        String text := ['Back']
        event onClick{
            back
        }
    }
}