Window UserListWindow{
     Label Title_L{
        String text := ['Users:']
    }
    Table Table_T{
        Set(Person) rows := [Person.allInstances()]
        Person selected  := [null]
        columns {
            ['Name'] : Label username {
                event onView (text){
                    try{
                        text := [$Table_T.row$.name]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Surname'] : Label usersurname {
                event onView (text){
                    try {
                        text := [$Table_T.row$.surname]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Role'] : Label courselimit {
                event onView (text){
                    try{
                        text := [$Table_T.row$.role.name()]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                }
            }
            ['Department'] : Label dept {
                event onView (text){
                    try{
                        text := [$Table_T.row$.belongs.name]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                }
            }
        }
    }
    Button View_B {
        String text:= ['View']
        String probe
        event onClick {
            if [ (not $Table_T.selected$.oclIsUndefined())  ]{
                try{
                    probe := [$Table_T.selected$.username]
                    open UserWindow(caller:[$UserListWindow.caller$], role:[$UserListWindow.caller$.role], entity:[$Table_T.selected$])
                } catch (SecurityException) {
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'],['Nothing selected'],[500])
            }
        }
    }
    //Button Delete_B {
    //    String text:= ['Delete']
    //    event onClick {
    //        delete [$Table_T.selected$]
    //        Table_T.rows := [null]
    //        reevaluate Table_T.rows
    //    }
    //}

    Label Name_L {
        String text:= ['Name']
    }
    TextField Name_TF {
        String text:= [null]
    }
    Label Surname_L {
        String text:= ['Surname']
    }
    TextField Surname_TF {
        String text:= [null]
    }
    Label Username_L {
        String text:= ['Username']
    }
    TextField Username_TF {
        String text:= [null]
    }
    Label Password_L {
        String text:= ['Password']
    }
    PasswordField Password_PF {
        String text:= [null]
    }
    Label Role_L {
        String text:= ['Role']
    }
    ComboBox Role_CB {
        Set(Role) rows := [Role.allInstances()->select(r|r<>Role::STAFF)]
        Role selected  := [null]
        Label roles { 
            event onView (text) {
                try{
                    text := [$Role_CB.row$.name()] 
                } catch (SecurityException){
                    text := ['RESTRICTED']
                }
            }
        }
    }
    Label Department_L {
        String text:= ['Department']
    }
    ComboBox Department_CB {
        Set(Department) rows := [Department.allInstances()->select(r|r.toString().size()<>0)]
        Department selected  := [null]
        Label dept { 
            event onView (text) {
                try{
                    text := [$Department_CB.row$.name] 
                } catch (SecurityException){
                    text := ['RESTRICTED']
                }
            }
        }
    }
    Button Create_B{
        String text := ['Create']
        event onClick{
            if [(not $Name_TF.text$.oclIsUndefined()) and 
                (not ($Name_TF.text$.size()=0)) and
                (not $Surname_TF.text$.oclIsUndefined()) and
                (not ($Surname_TF.text$.size()=0)) and
                (not $Username_TF.text$.oclIsUndefined()) and 
                (not ($Username_TF.text$.size()=0)) and
                (not $Password_PF.text$.oclIsUndefined()) and
                (not ($Password_PF.text$.size()=0)) and
                (not $Role_CB.selected$.oclIsUndefined()) and
                (not $Department_CB.selected$.oclIsUndefined())]{
                try{
                    if [Person.allInstances()->forAll(p|p.username<>$Username_TF.text$)]{
                        newUser := new Person
                        [$newUser$.name]:=[$Name_TF.text$]
                        [$newUser$.surname]:=[$Surname_TF.text$]
                        [$newUser$.username]:=[$Username_TF.text$]
                        [$newUser$.password]:=[$Password_PF.text$]
                        [$newUser$.role]:=[$Role_CB.selected$]
                        [$newUser$.belongs]:=[$Department_CB.selected$]
                        notification(['Success'],['User created'],[500])
                        Table_T.rows := [null]
                        reevaluate Table_T.rows
                        Name_TF.text:=[null]
                        Surname_TF.text:=[null]
                        Username_TF.text:=[null]
                        Password_PF.text:=[null]
                        Role_CB.selected:=[null]
                        Department_CB.selected:=[null]
                    } else {
                        notification(['Error'],['This login name already exists.'],[500])
                    }
                } catch (SecurityException) {
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'],['Form contains errors.'],[500])
            }
            
        }
    }
    Button Back_B{
        String text := ['Back']
        event onClick{
            back
        }
    }

}